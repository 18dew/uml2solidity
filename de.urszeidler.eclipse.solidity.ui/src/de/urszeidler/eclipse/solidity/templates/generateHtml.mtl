[comment encoding = UTF-8 /]
[module generateHtml('http://www.eclipse.org/uml2/5.0.0/UML')]

[import de::urszeidler::eclipse::solidity::util::um2service /]
[import de::urszeidler::eclipse::solidity::templates::generateWeb3Contract /]



[template public generateHtmlInterface(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[if (aModel.generateJsTests())]
[/if]
[/template]

[template public printTestHtml (p : Package) ]
<!doctype>
<html>
<head>
<script type='text/javascript' src="[p.name/]-test.js">
</script>
<style>
.contract {
	border-style: solid;
	border-width: 1px;
	margin-bottom: 4px;
	} 
.contract_attributes{
	border-style: solid;
	border-width: 1px;
	} 
.Struct_Mapping{}
.Value_Mapping{}
.contract_attribute{}
.contract_attribute_value{}
.function_execution{}
.function_parameter{}
.function_result{}
.testTable {
	display: table;
	width: auto;
	border-spacing: 5px; /*cellspacing:poor IE support for  this*/
	/* border-collapse:separate;*/
}
.testRow {
	display: table-row;
	width: auto;
}
.testCell {
	float: left; /*fix for  buggy browsers*/
	display: table-column;
}
.failed_state {
	border-style: solid;
	border-width: 1px;
	border-color: red;
	float: left;
	display: table-column;
}
.pass_state {
	border-style: solid;
	border-width: 1px;
	border-color: green;
	float: left;
	display: table-column;
}
</style>
</head>
<body bgcolor='#E6E6FA'>
	<h1>Tests for [p.name/]</h1>


<div id="all-testResult" class="testTable"></div>
<h1>Events</h1>
<div id="eventLog" ></div>

<!--[protected('Custom_html_'+p.name+ ' -->')]


<!--[/protected]-->


<script type='text/javascript'>

web3.eth.defaultAccount = web3.eth.accounts[ '[' /]0[ ']' /];
[for (	aClass : Class | p.allContracts())]
// execute all [aClass.name/] tests if set 
if(contracts[ '[' /]'[aClass.name/]'[ ']' /] !=undefined){
	var contract = contracts[ '[' /]'[aClass.name/]'[ ']' /].contract;
	var instance = new Test[aClass.name/](contract);
	instance.prefix = 'all';

[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))]
var event_[op.name/] = contract.[op.name/]({},{fromBlock: 0});
event_[op.name/].watch(function(error,result){
	if(!error){
		var e = document.getElementById('eventLog');
		var elemDiv = document.createElement('div');
		elemDiv.id= result.blockNumber +'event';
		e.appendChild(elemDiv);
		//console.log(result.address+ 'eventLog'+result.blockHash+' '+result.blockNumber+' '+result.args.name+' '+result.args.succesful+' ');
		elemDiv.innerHTML = '<div>'
[for (p : Parameter | op.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )]
        +'<span>'+result.args.[p.name/]+'</span>'
[/for]
+ '</div>';
		}else
		console.log(error);
	});
[/for]


//console.log(instance+'-->');
	instance.allTests();
}[/for]
	//[protected('moreCustomTests_'+p.name)]
	//TODO: implement
	//[/protected]

</script>
</body>
</html>
[/template]


[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[if (isGeneratePackage(p1))]
[generatePackage(p1)/]
[/if]
[iteratePackages(p1)/]
[/for]
[/template]

[**
 * Generate a basic html example for the given package.
*/]
[template public generatePackage(p : Package)?(isGeneratePackage(p)) ]
[comment the controller js /]
[comment][if (p.generateJsController())]
[file (p.getJsControllerDirectory()+ '/' +p.name+'-main.js', false, 'UTF-8')]
[printAllContracts(p)/]
[for (	aClass : Class | p.allContracts())]
[printJavascriptForClass(aClass)/]
[/for]
[printSimplePageObject(p)/]
[/file]
[/if][/comment]
[comment the tests /]
[comment][if (p.generateJsTests())]
[file (p.getJsTestsDirectory()+ '/' +p.name+'-test.js', false, 'UTF-8')]
[for (	aClass : Class | p.allContracts())]
[printTestJavascriptForClass(aClass)/]
[/for]
[/file]
[/if]
[file (p.getJsTestsDirectory()+ '/'+p.name +'-tests.html', false, 'UTF-8')]
[printTestHtml(p)/]
[/file][/comment]
[file (p.name+'.html', false, 'UTF-8')]
[printHtmlPage(p)/]
[/file]
[/template]

[template public printHtmlPage (p : Package) ]
<!doctype>
<html>
<head>
<!--
<script type='text/javascript' src="[p.name/]Web3.js">
</script>
[comment][printJavaScript(p)/][/comment]
-->


<script type='text/javascript' src="[p.getJsControllerDirectory()+ '/' +p.name+ '-main.js'/]">
</script>

<!-- [protected('custom_'+p.name+'_scripts -->')] 

<!-- [/protected] -->

<!-- start of style -->
<style>
[basicStyle(p)/]

</style>
</head>
<body bgcolor='#E6E6FA'>
	<h1>Sample Interface for [p.name/]</h1>
[printHtmlInterface(p)/]
<div id="eventLog" ></div>

<!-- [protected('custom_'+p.name+'html -->')] 

<!-- [/protected] -->


[printAllContractAdresses(p)/]

</body>
</html>
[/template]

[template public basicStyle (p : Package) ]
.contract {
	border-style: solid;
	border-width: 1px;
	margin-bottom: 4px;
	} 
.contract_attributes{
	border-style: solid;
	border-width: 1px;
	} 
.Struct_Mapping{}
.Value_Mapping{}
.contract_attribute{}
.contract_attribute_value{}
.function_execution{}
.function_parameter{}
.function_result{}
[/template]

[template public printSimplePageObject (aPackage : Package) ]
//the page Object for the [aPackage.name.toUpperFirst()/]Page.
function [aPackage.name.toUpperFirst()/]Page(prefix) {
	this.prefix=prefix;
	//[protected('page_'+aPackage.name+'_attributes')]
		//TODO: implement
	//[/protected]

	
// default Gui
this.placeDefaultGui=function() {
this.createDefaultGui();

	[comment]var e = document.getElementById(this.prefix);
	if(e!=null)
		e.innerHTML = this.createDefaultGui();
	else
		console.log(this.prefix+' [aPackage.name/]_gui not found');[/comment]
}
// default Gui
this.createDefaultGui=function() {
	//[protected('page_'+aPackage.name.toUpperFirst()+'_create_default_gui_functions')]
		//TODO: implement
	//[/protected]
}
	//[protected('page_'+aPackage.name.toUpperFirst()+'_functions')]
		//TODO: implement
	//[/protected]

}// end of [aPackage.name.toUpperFirst()/]Page
[/template]

[template public printAllContractAdresses (p : Package) ]
<script type='text/javascript'>
[comment][for (	aClass : Class | p.allContracts())]
var  default[aClass.name/]Controller  = new [aClass.name/]Controller();
default[aClass.name/]Controller.bindGui();

[aClass.name/]Gui  = new [aClass.name/]GuiFactory();
if(contracts[ '[' /]'[aClass.name/]'[ ']' /]!=undefined){
  	default[aClass.name/]Controller.[aClass.name/]_instance = contracts[ '[' /]'[aClass.name/]'[ ']' /].contract;
  	document.getElementById('[aClass.name/]_address').value = contracts[ '[' /]'[aClass.name/]'[ ']' /].contract.address; 
  
	default[aClass.name/]Controller.bindGui();
	default[aClass.name/]Controller._updateAttributes();
  
}
//[aClass.name/]Gui.placeDefaultGui();
//var  default[aClass.name/]Model  = new [aClass.name/]Model('Test');
//default[aClass.name/]Model.create();
[aClass.name/]Gui.prefix='Test';
[aClass.name/]Gui.placeDefaultGui();
test[aClass.name/]Controller  = new [aClass.name/]Controller();
test[aClass.name/]Controller.prefix='Test';
test[aClass.name/]Controller.bindGui();

[/for][/comment]

var c = new [p.name.toUpperFirst()/]Page('[p.name.toUpperFirst()/]-Gui');
//[protected('page_'+p.name.toUpperFirst()+'_js_functions')]
		//TODO: implement
//[/protected]
c.createDefaultGui();

</script>
[/template]

[template public printHtmlMappingInterface (c:Class , p : Property, k : Type,v : Type) ]
<div class="Value_Mapping" id="[c.name/]_contract_attribute_[p.name/]">mapping  [p.name/]:
		<input type="[k.toHtmlType()/]" id="[c.name/]_contract_attribute_[p.name/]_input">([k.name/])
    	<div class="Mapping_value" id="[c.name/]_contract_attribute_[k.name/]"> [v.name/]:
      		<div class="contract_attribute_value" id="[c.name/]_[p.name/]_value"> </div>
    	</div>
  </div>
[/template]

[template public printHtmlScructInterface (c:Class , p : Property, k : Type,v : Classifier) ]
<!--struct -->
<div class="Struct_Mapping" id="Struc_[c.name/]_contract_attribute_[p.name/]">struc mapping  [p.name/]:
		<input type="[k.toHtmlType()/]" id="[c.name/]_contract_attribute_[p.name/]_input">([k.name/])
[for (p1 : Property | v.attribute)]
    	<div class="Struct_attribute" id="[c.name/]_contract_attribute_[p.name/]_[p1.name/]"> [p1.name/]:
      		<div class="Struct_attribute_value" id="[c.name/]_[p.name/]_[p1.name/]_value"> </div>
    	</div>
[/for]
  </div>
[/template]

[template public printHtmlInterface (p : Package)? (not p.oclIsUndefined())]
[comment][for (	aClass : Class | p.allContracts())]
[printHtmlInterface(aClass)/]
[/for][/comment]
[for (	aClass : Class | p.allContracts())]
<div class="contract">[aClass.name/]
<div id="[aClass.name/]_gui" ></div>
</div>
[/for]
[for (	aClass : Class | p.allContracts())]
<div class="contract">test : [aClass.name/]
<div id="Test[aClass.name/]_gui" ></div>
</div>
[/for]
<div class="contract">test : [p.name/]
<div id="[p.name.toUpperFirst()/]-Gui" ></div>
</div>
[/template]

[template public printHtmlInterface (aClass : Class) ]
<!-- gui for [aClass.name/]_contract -->
<div class="contract" id="[aClass.name/]_contract">
[aClass.name/]:
  <input type="text" id="[aClass.name/]_address"> <button id="[aClass.name/]Controller.setAddress" onclick="[aClass.name/]Controller.setAddress()">change [aClass.name/] Address</button>
  <div class="contract_attributes" id="[aClass.name/]_contract_attributes"> attributes:
[printContractAttributes(aClass)/]
[for (p : Property | aClass.allMappingSubAttributes())]
[let value : Classifier = p.getStereotypeValue('Mapping', 'value').oclAsType(Classifier)]
[if (value.oclIsTypeOf(Class) and value.hasStereotype('Struct'))]
[printHtmlScructInterface(aClass, p, p.type, value )/]
[else]
[printHtmlMappingInterface(aClass, p, p.type, value)/]
[/if]
[/let]
[/for]
[for (p : Property | aClass.allKeyMappingSubAttributes())]
[let key : Classifier = p.getStereotypeValue('KeyMapping', 'key').oclAsType(Classifier)]
[if (p.type.oclIsTypeOf(Class)and p.type.hasStereotype('Struct'))]
[printHtmlScructInterface(aClass,p, key, p.type.oclAsType(Class))/]
[else]
[printHtmlMappingInterface(aClass,p, key, p.type)/]
[/if]
[/let]
[/for]
    <button id="[aClass.name/]_updateAttributes" onclick="[aClass.name/]Controller._updateAttributes()">update [aClass.name/] attributes</button>
  </div>
[printOperationsUi(aClass,'')/]
[for (prop : Property | aClass.attribute->select(hasStereotype('Delegate')))]
[printOperationsUi(prop.type.oclAsType(Class),'delegate_')/]
[/for]
</div>
[/template]

[template public printContractAttributes (aClass : Class) ]
[for (p : Property | aClass.allSubAttributes())]
    <div class="contract_attribute" id="[aClass.name/]_contract_attribute_[p.name/]"> [p.name/]:
      <div class="contract_attribute_value" id="[aClass.name/]_[p.name/]_value"> </div>
    </div>
[/for]
[/template]

[template public printOperationsUi (aClass : Class,prefix:String)? (not aClass.oclIsUndefined()) ]
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]
[printOperationUi(aClass,prefix,op)/]
[/for]
[/template]

[template public printOperationUi (aClass : Class,prefix:String,op : Operation) ]
  <div class="function_execution" id="[aClass.name/]_contract_function_[op.functionName()/]">
[aClass.name/]_[op.name/]:
[for (p : Parameter | op.allInParameters())]
	  <div class="function_parameter">[p.name/]<input type="[p.type.toHtmlType()/]" id="[prefix/][op.functionName()/]_[p.name/]"></div>
[/for]
	<button id="[aClass.name/]Controller.[prefix/][op.functionName()/]" onclick="[aClass.name/]Controller.[prefix/][op.functionName()/]()">execute [aClass.name/]_[op.name/]</button>
	<div class="function_result" id="[prefix/][op.functionName()/]_res"></div>
  </div>
[/template]

[template public functionName(op : Operation)]
[op.owner.oclAsType(NamedElement).name/]_[op.name/][for (p : Parameter | op.allInParameters())]_[p.type.name/][/for][/template]

[template public printJavaScript (p : Package) ]
[for (	aClass : Class | p.allContracts())]
<!-- javascript for [aClass.name/] -->
<script type='text/javascript'  src="[aClass.getJsControllerDirectory()+ '/' + aClass.owner.oclAsType(NamedElement).name+'-'+aClass.name+'-controller.js'/]">
[comment][printJavascriptForClass(aClass)/][/comment]
</script>
[if (aClass.generateJsController())]
[file (aClass.getJsControllerDirectory()+ '/' + aClass.owner.oclAsType(NamedElement).name+'-'+aClass.name+'-controller.js', false, 'UTF-8')]
[printJavascriptForClass(aClass)/]
[/file]
[/if]
[/for]
[/template]


[template public printTestJavascriptForClass (aClass : Class) ? (aClass.isContract() ) ]
[printJsModelWrapper(aClass)/]

//test class for [aClass.name/]
function Test[aClass.name/](contract) {
	
	this.test_instance = contract;
	this.model = new [aClass.name/]Model(contract);
	this.prefix='';
	this.messageBlockId = "testResult";
	var self = this;

	this.testSetup=function(){
		//[protected('testSetup_'+aClass.name)]
		//TODO: implement
		//[/protected]
	}

	this.allTests=function(){
		this.testSetup();
		this.testAttributes();
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]
		this.test[op.functionName()/]();
[/for]	
		this.customTests();
	
		//[protected('allTests_'+aClass.name)]
		//TODO: implement
		//[/protected]

	}
	
	//print the test result
	this.printTest=function(testName,testMessage,state){
		var e = document.getElementById(this.prefix+'-'+this.messageBlockId);
		var elemDiv = document.createElement('div');
		elemDiv.id= this.prefix+'-'+testName;
		elemDiv.className='testRow';
		elemDiv.text=testMessage;
		var stateDiv = document.createElement('div');
		if(state){
			elemDiv.innerHTML = '<div class="pass_state">P</div><div class="testCell">'+testMessage+'</div>';
		}else{
			elemDiv.innerHTML = '<div class="failed_state">F</div><div class="testCell">'+testMessage+'</div>';
		}
		e.appendChild(elemDiv);
	}

	//assertEquals
	this.testAE=function(testName,testMessage,expected,value) {
		if(expected==value)
			this.printTest(testName, testMessage, true);
		else
			this.printTest(testName, testMessage+': expected '+expected+' got '+value, false);
	}

	//test the attributes after setup	
	this.testAttributes=function() {
	//[protected('attributeTests_'+aClass.name)]
	//TODO: implement
	//[/protected]
	}
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]

	//Test for [op.functionName()/]
	this.test[op.functionName()/]=function() {
		//[protected('test_'+op.functionName())]
		//TODO: implement
//console.log('test[op.functionName()/]');
[for (p : Parameter | op.allInParameters())]
//	var p_[p.name/] = '';
[/for]
//	var res = this.test_instance.[op.name/]([for (p : Parameter | op.allInParameters())separator (',')] p_[p.name/][/for]);
//	var state = res==="";		
		this.testAE("test[op.name/]", "executed: test[op.functionName()/]",true, false);		
		//[/protected]
	}
[/for]
	this.customTests=function() {
		//[protected('test_'+aClass.name+'_custom tests')]
		//
		//[/protected]
	}
}
[/template]

[template public printJavascriptForClass (aClass : Class) ]
[printJsModelWrapper(aClass)/]
[printJsGuiFactory(aClass)/]
[printJsGuiController(aClass)/]
[printJsManager(aClass)/]
[printJsGuiManager(aClass)/]

[printDeployer(aClass)/]
//[protected('custom_'+aClass.name+'_js')]
//TODO: implement
//[/protected]
[/template]

[template public printDeployer (aClass : Class, aClass1 : Class) ]
//deploys the contract
function [aClass.name/]Deployment(guiId){
[for (op : Operation | aClass.allConstructors())]
	this.deploy[op.functionName()/] = function(account,code,providedGas,[for (p : Parameter | op.allInParameters())separator (',')][p.name/][/for]){
		var c = [aClass.name/].new(_name,_url,_description,{
			from: account,
			data: code,
			gas:  providedGas
		});
		return c;
	}
	
[/for]



//[protected(aClass.name+'_deployment_js')]
//TODO: implement
//[/protected]

}

[/template]


[**
 * Print a js guimannager, holding n managers.
*/]
[template public printJsGuiManager (aClass : Class) ]
//Manages a list of [aClass.name/]Manager uses the guid id to place the gui which is also the eventlogPrefix
function [aClass.name/]GuiMananger(guiId){
	this.prefix = guiId;
	this.managers=new Array();	//[ '[' /][ ']' /];		
	this.guiFunction = null;
	
	this.addManager = function(contract) {
		var m = new [aClass.name/]Manager(contract.address,contract,this.prefix);
		m.eventlogPrefix = this.prefix;
		m.watchEvents();
		if(this.guiFunction!=null)
			m.guiFunction = this.guiFunction;
		this.managers.push(m);
		//manager.addGui();
	}
			
	this.clearGui = function(e){
		if(e==null)
			e = document.getElementById(this.prefix);
		if(e!==undefined)
			e.innerHTML ='';
	}
			
	this.displayGui = function(e){
		if(e==null)
			e = document.getElementById(this.prefix);
		if(e==undefined) return;
		for (i in this.managers) {
			var manager = this.managers[ '[' /]i[ ']' /] ;
			var elemDiv = document.createElement('div');
			elemDiv.id= manager.prefix + 'GuiContainer';//'[aClass.name/]_gui';
			e.appendChild(elemDiv);
			if(this.guiFunction==null)
				elemDiv.innerHTML = manager.createGui(manager.g);
			else elemDiv.innerHTML = this.guiFunction(manager.g);
			manager.c.bindGui();
		}
	}
	this.displaySimpleGui = function(){
		for (i in this.managers) {
			var manager = this.managers[ '[' /]i[ ']' /] ;
			manager.addGui(null);
		}
	}

	this.updateGui = function(){
		for (i in this.managers) {
			this.managers[ '[' /]i[ ']' /].updateGui();
		}
//		console.log('update');
	}
}// end of gui mananger
[/template]

[**
 * Print the Js glue code mananer.
*/]
[template public printJsManager (aClass : Class) ]
//class as GlueCode [aClass.name/]Manager
//uses prefix + 'GuiContainer'
function [aClass.name/]Manager(prefix,contract,containerId) {
	this.prefix = prefix;
	var self = this;
	this.c = new [aClass.name/]Controller();
	this.c.prefix=prefix;
	this.c.instance=contract;
	this.c.contractAddress = contract.address;
	this.g = new [aClass.name/]GuiFactory();
	this.g.prefix = prefix;
	this.containerId = containerId;
	this.eventlogPrefix = '';
	this.guiFunction = null;

	this.addGui = function(e) {
		if(e==null)
			e = document.getElementById(this.containerId);
		if(e==null){
		console.log(this.containerId+' not found or :'+e);
		return;
		}
		var elemDiv = document.createElement('div');
		elemDiv.id= this.prefix +'[aClass.name/]_gui';
		e.appendChild(elemDiv);
		if(this.guiFunction==null)
			elemDiv.innerHTML = this.createGui(this.g);
		else elemDiv.innerHTML = this.guiFunction(this.g);
		
		var e = document.getElementById(this.prefix+'[aClass.name/]_address');
		if(e!=null)
			e.value = this.c.contractAddress;
		else 
			console.log(this.prefix+'[aClass.name/]_address not found');
		this.c.bindGui();
	}	
	this.clearGui = function(e){
		if(e==null)
			e = document.getElementById(this.containerId);
		e.innerHTML ='';
	}
	this.createGui = function(guifactory){
		var txt ='';
//[protected(aClass.name+'_create_gui_js')]
		txt = txt + guifactory.createDefaultGui();
//[/protected]
		return guifactory.createSeletonGui(txt);

	}
	this.createSmallGui = function(guifactory){
		var txt ='';
		txt = txt + guifactory.createAttributesGui();
		return guifactory.createSeletonGui(txt);

	}
	this.updateGui = function(){
		this.c._updateAttributes();
	}
	this.getContract = function(){
		return this.c.instance;
	}

//watch events
	this.watchEvents=function(){
	[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))]
	var event_[op.name/] = contract.[op.name/]({},{fromBlock: 0});
	var elp = this.eventlogPrefix;
	event_[op.name/].watch(function(error,result){
	if(!error){
		var e = document.getElementById(elp+'eventLog');
		if(e==null){
			console.log(elp+'eventLog');
			return;
		}
		var elemDiv = document.createElement('div');
		elemDiv.id= result.blockNumber +'event';
		e.appendChild(elemDiv);
		//console.log(result.address+ 'eventLog'+result.blockHash+' '+result.blockNumber+' '+result.args.name+' '+result.args.succesful+' ');
		elemDiv.innerHTML = '<div>'
[for (p : Parameter | op.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )]
        +'<span>'+result.args.[p.name/]+'</span>'
[/for]
		+ '</div>';
		}else
			console.log(error);	
	});
[/for]
	}

}// end of manager
[/template]

[**
 * Print a simple js model wrapper
*/]
[template public printJsModelWrapper (aClass : Class) ]
//a simple bean class arount the contract
// the [aClass.name/]Model
function [aClass.name/]Model(contract) {
this.contract = contract;
[for (p : Property | aClass.allSubAttributes())]
this.get[p.name.toUpperFirst()/] = function(){
return contract.[p.name/](); 
}
[/for]
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]
this.[op.name/] = function([for (p : Parameter | op.allInParameters())separator (',')][p.name/][/for]){
return contract.[op.name/]([for (p : Parameter | op.allInParameters())separator (',')][p.name/][/for]); 
}
[/for]
}// end of function [aClass.name/]Model
[/template]


[**
 * Print the controller js
*/]
[template public printJsGuiController (aClass : Class) ]
// script for [aClass.name/] gui controller
function [aClass.name/]Controller() {

	this.instance = undefined;
	this.prefix='';
	this.contractAddress = undefined; 
	this.eventlogPrefix = '';
	var self = this;

// bind buttons
	this.bindGui=function() {
		console.log('bind gui for:'+self.prefix);
		var btn = document.getElementById(self.prefix+'[aClass.name/]Controller.setAddress');
		if(btn!=undefined)		
			btn.onclick = this.setAddress;
		else console.log('addres widget not bound');

		var btn = document.getElementById(self.prefix+'[aClass.name/]_updateAttributes');
		if(btn!=undefined)
			btn.onclick = this._updateAttributes;
		else console.log('_updateAttributes widget not bound');
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]
		var btn = document.getElementById(self.prefix+'[aClass.name/]Controller.[op.functionName()/]');
		if(btn!=undefined)
			btn.onclick = this.[op.functionName()/];
		else console.log('[op.functionName()/] widget not bound');
[/for]
	}
	// set function
	this.setAddress=function() {
	var _address = document.getElementById(self.prefix+'[aClass.name/]_address');
	if(_address==null)return;

	self.[aClass.name/]_instance = [aClass.name/]Contract.at(_address.value);
	self.contractAddress = _address.value;
	self._updateAttributes();
}
[printUpdateAttributeFunction(aClass)/]

[printCallFunction(aClass,aClass,'')/]
//delegated calls
[for (prop : Property | aClass.attribute->select(hasStereotype('Delegate')))]
[printCallFunction(prop.type.oclAsType(Class),aClass,'delegate_')/]
[/for]

}// end controller	
[/template]

[**
 * Print the gui factory
*/]
[template public printJsGuiFactory (aClass : Class) ]
//gui factory [aClass.name/]
function [aClass.name/]GuiFactory() {
	this.prefix='';
	
// default Gui
this.placeDefaultGui=function(e) {
	if(e==null)
		e = document.getElementById(this.prefix+'[aClass.name/]_gui');
	if(e!=null)
		e.innerHTML = this.createDefaultGui();
	else
		console.log(this.prefix+'[aClass.name/]_gui not found');
}
// default Gui
this.createDefaultGui=function() {
	return [for (it : String | printHtmlInterface(aClass).toString().tokenizeLine())separator ('+')]
	'[it.replaceAll('id="', 'id="\'+this.prefix+\'').replaceAll('onclick="', 'onclick="\'+this.prefix+\'')/]'
[/for];
}

//default attributes
this.createAttributesGui=function() {
	return [for (it : String | printContractAttributes(aClass).toString().tokenizeLine())separator ('+')]
	'[it.replaceAll('id="', 'id="\'+this.prefix+\'').replaceAll('onclick="', 'onclick="\'+this.prefix+\'')/]'
[/for];
}



[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))]
this.create[op.functionName()/]Gui=function() {
return [for (it : String | printOperationUi(aClass,'',op).toString().tokenizeLine())separator ('+')]
	'[it.replaceAll('id="', 'id="\'+this.prefix+\'').replaceAll('onclick="', 'onclick="\'+this.prefix+\'')/]'
[/for];
}
[/for]

[for (p : Property | aClass.allMappingSubAttributes())]
[let value : Classifier = p.getStereotypeValue('Mapping', 'value').oclAsType(Classifier)]
[if (value.oclIsTypeOf(Class) and value.hasStereotype('Struct'))]
this.create[p.name/]StructGui=function() {
return [for (it : String | printHtmlScructInterface(aClass, p, p.type, value ).toString().tokenizeLine())separator ('+')]
	'[it.replaceAll('id="', 'id="\'+this.prefix+\'').replaceAll('onclick="', 'onclick="\'+this.prefix+\'')/]'
[/for];
}

[/if][/let][/for]
[for (p : Property | aClass.allKeyMappingSubAttributes())]
[let key : Classifier = p.getStereotypeValue('KeyMapping', 'key').oclAsType(Classifier)]
[if (p.type.oclIsTypeOf(Class)and p.type.hasStereotype('Struct'))]
this.create[p.name/]StructGui=function() {
return [for (it : String | printHtmlScructInterface(aClass,p, key, p.type.oclAsType(Class)).toString().tokenizeLine())separator ('+')]
	'[it.replaceAll('id="', 'id="\'+this.prefix+\'').replaceAll('onclick="', 'onclick="\'+this.prefix+\'')/]'
[/for];
}
[/if][/let][/for]

//print the contract div around
this.createSeletonGui=function(inner) {
	return 	'<!-- gui for [aClass.name/]_contract -->'
+	'	<div class="contract" id="'+this.prefix+'[aClass.name/]_contract">'
+ inner
+'</div>';
}


//eventguis
[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))]
this.create[op.name/]LogDataGui = function(prefix, blockHash, blockNumber
[for (p : Parameter | op.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )]
,[p.name/][/for]
) {
		return '<ul class="dapp-account-list"><li > '
        +'<a class="dapp-identicon dapp-small" style="background-image: url(identiconimage.png)"></a>'
		+'<span>'+prefix+' ('+blockNumber+')</span>'
[for (p : Parameter | op.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )]
        +'<span>'+[p.name/]+'</span>'
[/for]
        +' </li>'
        ;
}
[/for]

}//end guifactory
[/template]

[template public printUpdateAttributeFunction (aClass : Class) ]
//update attributes
this._updateAttributes=function () {
if(this.instance===null) return;
// update attributes
[for (p : Property | aClass.allSubAttributes())]
	var [p.name/]_res = self.instance.[p.name/]();
	var e = document.getElementById(self.prefix+'[aClass.name/]_[p.name/]_value');
	if([p.name/]_res!=null && e!=null)
		e.innerText = [p.name/]_res;
	else console.log(self.prefix+'[aClass.name/]_[p.name/]_value not found');
[/for]
[for (p : Property | aClass.allMappingSubAttributes())]
[let value : Classifier = p.getStereotypeValue('Mapping', 'value').oclAsType(Classifier)]
[if (value.oclIsTypeOf(Class) and value.hasStereotype('Struct'))]
	var e = document.getElementById(self.prefix+'[aClass.name/]_contract_attribute_[p.name/]_input');
if(e!=null){
	var _key = e.value;
	if(_key=='') return;
	var [p.name/]_res = self.instance.[p.name/](_key);
	if([p.name/]_res!=null){
[for (p1 : Property | value.attribute)]
	var e1 = document.getElementById(self.prefix+'[aClass.name/]_[p.name/]_[p1.name/]_value');
	if(e1!=null)	
		e1.innerText = [p.name/]_res[ '[' /][ i-1/][ ']' /];
[/for]
	}}
[else]
var e = document.getElementById(self.prefix+'[aClass.name/]_contract_attribute_[p.name/]_input');
if(e!=null){
	var _key = e.value;
	if(_key=='') return;
	var [p.name/]_res = self.instance.[p.name/](_key);
	if([p.name/]_res!=null){
		var e1 = document.getElementById(self.prefix+'[aClass.name/]_[p.name/]_value');
		if(e1!=null)	
			e1.innerText = [p.name/]_res;
	}}
[/if]
[/let]
[/for]
[for (p : Property | aClass.allKeyMappingSubAttributes())]
[let key : Classifier = p.getStereotypeValue('KeyMapping', 'key').oclAsType(Classifier)]
[if (p.type.oclIsTypeOf(Class) and p.type.hasStereotype('Struct'))]
var e = document.getElementById(self.prefix+'[aClass.name/]_contract_attribute_[p.name/]_input');
if(e!=null){
	var _key = e.value;
	if(_key=='') return;
	var [p.name/]_res = self.instance.[p.name/](_key);
	if([p.name/]_res!=null){
[for (p1 : Property | p.type.oclAsType(Class).attribute)]
	var e1 = document.getElementById(self.prefix+'[aClass.name/]_[p.name/]_[p1.name/]_value');
	if(e1!=null)	
		e1.innerText = [p.name/]_res[ '[' /][ i-1/][ ']' /];
[/for]
	}}
[else]
var e = document.getElementById(self.prefix+'[aClass.name/]_contract_attribute_[p.name/]_input');
if(e!=null){
	var _key = document.getElementById(self.prefix+'[aClass.name/]_contract_attribute_[p.name/]_input').value;
	if(_key=='') return;
	var [p.name/]_res = self.instance.[p.name/](_key);
	if([p.name/]_res!=null){
		var e1 = document.getElementById(self.prefix+'[aClass.name/]_[p.name/]_value');
		if(e1!=null)	
			e1.innerText = [p.name/]_res;
	}}
[/if]
[/let]
[/for]
}
[/template]

[template private printCallFunction(aClass : Class,aContractClass : Class, prefix:String)]
//call functions
[for (op : Operation | aClass.allSubFunctions())]
//function [prefix/][aClass.name/]_[op.name/]
this.[prefix/][op.functionName()/]=function() {
[for (p : Parameter | op.allInParameters())]
	var e = document.getElementById(self.prefix+'[prefix/][op.functionName()/]_[p.name/]');
	if(e!=null)
		var param_[p.name/] = e.value;
	else console.log(self.prefix+'[prefix/][op.functionName()/]_[p.name/] not found');
[/for]
	var res = self.instance.[op.name/]([for (p : Parameter | op.allInParameters())separator (', ')]param_[p.name/][/for]);
[if (op.hasReturnValue())]
	var e = document.getElementById(self.prefix+'[prefix/][op.functionName()/]_res');
	if(res!=null && e!=null)
		e.innerText = res;
[/if]
}
[/for]
[/template]

[query public toHtmlType (t : Type) : String = if t.name.startsWith('uint') then 'number' else 'text' endif /]

