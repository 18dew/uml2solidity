[comment encoding = UTF-8 /]
[**
 * The documentation of the module generateContracts.
 */]
[module generateContracts('http://www.eclipse.org/uml2/5.0.0/UML')]

[import de::urszeidler::eclipse::solidity::util::um2service /]

[**
 * The documentation of the template generateElement.
 * @param aClass
 */]
[template public generateElement(aModel : Model)]
[comment @main/]
[iteratePackages(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[generatePackage(p1)/]
[iteratePackages(p1)/]
[/for]
[/template]

[**
 * Generates a packages as a file.
 * @param aModel a package
 */]
[template public generatePackage(p : Package)?(isGeneratePackage(p))]
[file (p.name+'.sol', false, 'UTF-8')]
[printCommentDoc(p.ownedComment)/]
[for (pi : PackageImport | p.packageImport->select(hasStereotype('Import')))]
import [if (not pi.getStereotypeValue('Import', 'importFilter').oclIsUndefined())] [pi.getStereotypeValue('Import', 'importFilter')/] from [/if]"[pi.target.oclAsType(Package).toImport()/]";
[/for]
[printLibrary(p)/]
[for (	i : Interface | p.allInterfaces())]
[printContractInterface(i)/]
[/for]
[for (	aClass : Class | p.allContracts())]
[printContract(aClass)/]
[/for]
[/file]
[/template]

[**
 * Prints a contact interface.
*/]
[template public printContractInterface (aInterface : Interface)?(not hasStereotype('StandardizedContractAPI')) ]
[printCommentDoc(aInterface.ownedComment)/]
contract [aInterface.name/][contractIs(aInterface)/] {
[for (ne : NamedElement | aInterface.ownedMember->filter(Enumeration))]
[if (oclIsTypeOf(Enumeration))]
    [printEnum(ne.oclAsType(Enumeration))/]
[/if][/for]
[for (ne : NamedElement | aInterface.allStructs())]
    [printStruct(ne.oclAsType(Class))/]
[/for]
[for (op : Operation | aInterface.ownedOperation->select(hasStereotype('Event')))]
	[printEventDefinition(op)/]
[/for]
[for (op : Operation | aInterface.ownedOperation->select(hasStereotype('Function')))]
	
	[printFunctionComments(op)/]
	function [printFunctionDeclaration(op)/];
[/for]
}

[/template]

[**
 * Prints a library.
*/]
[template public printLibrary (aModel : Package)?(not aModel.allLibrarys()->isEmpty()) ]
[for (	aClass : Class | aModel.allLibrarys())]

[printCommentDoc(aClass.ownedComment)/]
library [aClass.name/] {
[for (op : Operation | aClass.allFunctions())]
	[printOperation(op)/]
[/for]
}
[/for]
[/template]

[**
 * print a structure
*/]
[template public printStruct (aClass : Class) ]
[printCommentDoc(aClass.ownedComment)/]
struct [aClass.name/] {
[for (t : Property | aClass.attribute)]
	[t.type.name/][if (t.oclIsKindOf(MultiplicityElement))][printTypeM(t.oclAsType(MultiplicityElement)) /][/if] [t.name/];
[/for]
}
[/template]

[**
 * print a contract 
*/]
[template public printContract (aClass : Class) ]
[printCommentDoc(aClass.ownedComment)/]
contract [aClass.name/][contractIs(aClass)/] {
[for (ne : NamedElement | aClass.ownedMember->filter(Enumeration))]
[if (oclIsTypeOf(Enumeration))]
    [printEnum(ne.oclAsType(Enumeration))/]
[/if][/for]
[for (ne : NamedElement | aClass.allStructs())]
    [printStruct(ne.oclAsType(Class))/]
[/for]

[for (prop : Property | aClass.allCProperties())]
	[printProperty(prop)/]
[/for]
[for (prop : Property | aClass.allMappingProperties())]
	[printPropertyMapping(prop)/]
[/for]
	// [protected (aClass.name+'.attributes')]
	//TODO: implement
	// [/protected]
[for (c : Constraint | Constraint.allInstances()->select(_context=aClass) )]
	[c.printContraintDefinition(aClass)/]
[/for]
[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))]
	[printEventDefinition(op)/]
[/for]
	[printConstructor(aClass)/]
[for (op : Operation | aClass.allAbstractFunctions())]
	[printFunctionImplementation(op)/]
[/for]
[for (op : Operation | aClass.allFunctions())]
	[printOperation(op)/]
[/for]
[for (prop : Property | aClass.attribute->select(hasStereotype('Delegate')))]
	[printDelegateOperations(prop)/]
[/for]
[for (prop : Property | aClass.allGetterProperties())]
	[printGetterSetter(prop)/]
[/for]
	// [protected (aClass.name+'.operations')]
	//TODO: implement
	// [/protected]
}

[/template]

[**
 * Prints the getter and setter for a property.
*/]
[template public printGetterSetter (aProperty : Property)?(aProperty.hasStereotype('GetterSetter')) ]
[if (aProperty.getStereotypeValue('GetterSetter', 'getter').oclAsType(Boolean))]
// get[aProperty.name/]
function get[aProperty.name.toUpperFirst()/]() returns([aProperty.type.name/]) {
	return [aProperty.name/];
}
[/if]
[if (aProperty.getStereotypeValue('GetterSetter', 'setter').oclAsType(Boolean))]
// set[aProperty.name/]
function set[aProperty.name.toUpperFirst()/] ([aProperty.externalType()/] a[aProperty.name/]) {
	[aProperty.name/] = [if (hasStereotype(aProperty.type, 'Contract'))][aProperty.type.name/](a[aProperty.name/]);[else]a[aProperty.name/];[/if]
}
[/if]
[/template]

[query public externalType(t : TypedElement) : String = if t.type.hasStereotype('Contract') then
'address'
else
t.type.name
endif
 /]

[template public contractIs (aClass : Class) ?(not aClass.allSuperTypesWithoutContractApi()->isEmpty())]
 is [for (c : Classifier | aClass.allSuperTypesWithoutContractApi())separator (',')][c.name/][/for][/template]

[template public contractIs (aClass : Interface)?(not aClass.general->isEmpty())]
 is [for (c : Classifier | aClass.general)separator (',')][c.name/][/for][/template]

[template public printEnum (en : Enumeration) ]
enum [en.name/] { [for (l : EnumerationLiteral | en.ownedLiteral)separator (',')][l.name/][/for] }
[/template]


[template public printContraintDefinition (aConstraint : Constraint, aClass : Class) ? (aConstraint._context=aClass) ]

modifier [aConstraint.name/]
{
    [aConstraint.specification.oclAsType(LiteralString).value/]
    _
}
[/template]

[template public printEventDefinition (aOperation : Operation)? (hasStereotype(aOperation, 'Event')) ]

[printFunctionComments(aOperation)/]
event [aOperation.name/]([printParameters(aOperation)/]);
[/template]

[template public printConstructor (aClass : Class) ? (not aClass.getStereotypeValue('Contract', 'ConstructorCode').oclIsUndefined()) ]
//
// constructor for [aClass.name/]
//
function [aClass.name/]([printContructorArgs(aClass)/]){
    [aClass.getStereotypeValue('Contract', 'ConstructorCode')/]
    //[protected ('Constructor.'+aClass.name)]
	//TODO: implement
	// deprecated use a normal function to model the constructor
    //[/protected]
}
[/template]

[template public printContructorArgs (aClass : Class) ? (not aClass.getStereotypeValue('Contract', 'ConstructorArgs').oclIsUndefined()) ]
[aClass.getStereotypeValue('Contract', 'ConstructorArgs')/][/template]

[**
 * Prints a property, initalized when a default value is set.
*/]
[template public printProperty (p : Property)?(not hasStereotype(p, 'Mapping')) ]
[if (p.defaultValue.oclIsUndefined())]
[printPropertyDeclaration(p)/];[else]
[printPropertyDeclaration(p)/] = [printDefaultValue(p.defaultValue)/];[/if]
[/template]

[template public printPropertyDeclaration(p : Property)]
[p.type.name/][if (p.oclIsKindOf(MultiplicityElement))][printTypeM(p.oclAsType(MultiplicityElement)) /][/if] [p.visibility()/] [p.name/][/template]

[template public printDefaultValue (v : ValueSpecification) ]
[v.name/]
[/template]
[template public printDefaultValue (v : LiteralString) ]
"[v.value/]"
[/template]
[template public printDefaultValue (v : LiteralInteger) ]
[v.value/]
[/template]
[template public printDefaultValue (v : LiteralBoolean) ]
[v.value/]
[/template]

[**
 * Prints a mapping property.
*/]
[template public printPropertyMapping (t : Property)?( hasStereotype(t, 'Mapping')) ]
mapping ([t.type.name/]=>[getStereotypeValue('Mapping', 'value').oclAsType(NamedElement).name/])[t.visibility()/] [t.name/];
[/template]

[**
 * Prints a concrete or abstract function.
*/]
[template public printOperation (aOperation : Operation) ? (hasStereotype(aOperation, 'Function'))]
[if (aOperation.isAbstract)]

[printFunctionComments(aOperation)/]
function [printFunctionDeclaration(aOperation)/];
[else]
[printFunctionImplementation(aOperation)/]
[/if]
[/template]


[**
 * Print a complete function with doc.
*/]
[template public printFunctionImplementation(aOperation : Operation)]

[printFunctionComments(aOperation)/]
function [printFunctionDeclaration(aOperation)/] {
[if(not aOperation.getStereotypeValue('Function', 'functionCode').oclIsUndefined())]	[aOperation.printCode()/][/if]
	//[protected(aOperation.owner.oclAsType(NamedElement).name+'.function.'+aOperation.name)]
	//TODO: implement
	//[/protected]
}
[/template]

[template public printCode(op : Operation) ? (op.hasStereotype('Function') and not op.getStereotypeValue('Function', 'functionCode').oclIsUndefined())]
[op.getStereotypeValue('Function', 'functionCode').oclAsType(String).printLines('')/][/template]

[template public printFunctionDeclarationA(aOperation : Operation)]
[aOperation.name/]([printParameters(aOperation,ParameterDirectionKind::_in)/]) [aOperation.visibility()/] [printModifier(aOperation)/] [printReturn(aOperation)/][/template]

[template public printFunctionDeclaration(aOperation : Operation) ? (hasStereotype(aOperation, 'Function')) ]
[printFunctionDeclarationA(aOperation)/][/template]

[**
 * Print a delegation method and the code calling the delegated object.
*/]
[template public printDelegateOperations (aProperty : Property)]
// delegate functions from [aProperty.name/] ([aProperty.type.name/])
[for (aOperation : Operation | aProperty.type.oclAsType(Class).allFunctions()->select(visibility=VisibilityKind::public))]

// delegate to [aOperation.name/]
function [aProperty.name/]_[aOperation.name/]([printParameters(aOperation)/]) [printReturn(aOperation)/] {
[if (hasReturnValue(aOperation))]
[if (not aOperation.allReturnParameters()->any(name.oclIsUndefined()).oclIsUndefined())]
	return [printDelegateCall(aProperty, aOperation)/]
[else]
	([for (p : Parameter | aOperation.allReturnParameters())separator (',')][p.name/][/for]) = [printDelegateCall(aProperty, aOperation)/]
[/if]
[else]
	[printDelegateCall(aProperty, aOperation)/]    
[/if]
}
[/for]
[/template]

[template public printDelegateCall(aProperty : Property, aOperation : Operation)]
[aProperty.name/].[aOperation.name/]([for (p : Parameter | aOperation.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )separator (',')][p.name/][/for]);
[/template]

[template public printReturn (aOperation : Operation)?(aOperation.hasReturnValue())]
[if(aOperation.isReturnConstant())] constant [/if]returns ([aOperation.printParameters(ParameterDirectionKind::return)/])
[/template]

[template public printModifier (aOperation : Operation)?(hasModifier(aOperation)) ]
 [for (c : Constraint |  aOperation.allModifier())separator (' ')][c.name/][/for]
[/template]

[template public printParameters (aOperation : Operation) ]
[for (p : Parameter | aOperation.ownedParameter->select(oclAsType(Parameter).direction<>ParameterDirectionKind::return) )separator (',')]
[p.printType()/][/for][/template]

[template public printParameters (aOperation : Operation,pdk : ParameterDirectionKind) ]
[for (p : Parameter | aOperation.ownedParameter->select(oclAsType(Parameter).direction=pdk) )separator (',')]
[p.printType()/][/for][/template]

[comment print the comments on the element /]
[template public printCommentDoc (comments : Set(Comment)) ? (not comments->isEmpty()) ]
/*
[for (c : Comment | comments)]
[c._body.printLines('*')/][/for]
*/[/template]


[**
 * Prints a complete comment with parameter doc.
*/]
[template public printFunctionComments(aOperation : Operation) ? (not aOperation.ownedComment->isEmpty())
{comments : Set(Comment) = aOperation.ownedComment;} ]
/*
[for (c : Comment | comments)]
[c._body.printLines('*')/][/for]
[if (not aOperation.allInParameters()->isEmpty())]
* 
[for (p : Parameter | aOperation.allInParameters() )]
* [p.name/] -[if (not p.ownedComment->asSequence()->first()._body.oclIsUndefined())][p.ownedComment->asSequence()->first()._body.printInLines()/][elseif][/if]
[/for][/if]
[if (not aOperation.allReturnParameters()->isEmpty())]
* returns
[for (p : Parameter | aOperation.allReturnParameters() )]
* [p.name/] -[if (not p.ownedComment->asSequence()->first()._body.oclIsUndefined())][p.ownedComment->asSequence()->first()._body.printInLines()/][elseif][/if]
[/for][/if]
*/[/template]

[template public printLines(aString : String, prefix : String)]
[for (line : String | aString.tokenizeLine())]
[prefix/] [line/]
[/for]
[/template]

[**
 * Prints the string in one line seperated with ' '.
*/]
[template public printInLines(aString : String)]
[for (line : String | aString.tokenizeLine())]
 [line/][/for]
[/template]


[template private printType(t : TypedElement)]
[t.type.name/][if (t.oclIsKindOf(MultiplicityElement))][printTypeM(t.oclAsType(MultiplicityElement))/][/if] [t.name/]
[/template]

[**
 * Print the multiplicity as array.
*/]
[template private printTypeM(t : MultiplicityElement) ? (t.oclIsKindOf(MultiplicityElement))]
[if (t.getUpper()=-1)][ '[' /][ ']' /][elseif (t.getUpper()>1)][ '[' /][t.getUpper()/][ ']' /][/if][/template]


[query public toImport(pi : Package) : String = pi.toImportPath()+ pi.name+'.sol' /]

[query public toImportPath(pi : Package) : String = './' /]


[query public visibility(v : Property) : String = if v.visibility = VisibilityKind::public then 'public'
else if v.visibility = VisibilityKind::private then 'private'
else if v.visibility = VisibilityKind::protected then 'internal'
else if v.visibility = VisibilityKind::_package then 'external'
else '' endif endif endif endif
 /]

[query public visibility(v : Operation) : String = if v.visibility = VisibilityKind::public then 'public'
else if v.visibility = VisibilityKind::private then 'private'
else if v.visibility = VisibilityKind::protected then 'internal'
else if v.visibility = VisibilityKind::_package then 'external'
else '' 
endif
endif
endif
endif
 /]

[query public printParameterModifier(aP : Parameter) : String = if aP.hasStereotype('Const') then 'constant' else '' endif /]



