[comment encoding = UTF-8 /]
[module generateJavaTestCode('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import de::urszeidler::eclipse::solidity::templates::generateJavaCode/]
[import de::urszeidler::eclipse::solidity::util::um2service /]

[**
 * The documentation of the template generateElement.
 * @param aClass
 */]
[template public generateElement(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[if (isGeneratePackage(p1))]
[generatePackage(p1)/]
[/if]
[iteratePackages(p1)/]
[/for]
[/template]

[template private generatePackage(p : Package)?(isGeneratePackage(p))]
[for (	aClass : Class | p.allContracts())]
[file (p.package2Path()+'/'+ aClass.name+'Test.java'  , false, 'UTF-8')]
package [p.toPackage()/];

import static org.junit.Assert.*;

[for (pi : PackageImport | p.allImports() )]
import [pi.target.oclAsType(Package).toPackage()/].*;
[/for]

import java.io.File;
import java.util.concurrent.CompletableFuture;

import org.adridadou.ethereum.EthereumFacade;
import org.adridadou.ethereum.provider.MainEthereumFacadeProvider;
import org.adridadou.ethereum.provider.RopstenEthereumFacadeProvider;
import org.adridadou.ethereum.provider.RpcEthereumFacadeProvider;
import org.adridadou.ethereum.provider.StandaloneEthereumFacadeProvider;
import org.adridadou.ethereum.provider.TestnetEthereumFacadeProvider;
import org.adridadou.ethereum.values.EthAccount;
import org.adridadou.ethereum.values.EthAddress;
import org.adridadou.ethereum.values.SoliditySource;
import org.adridadou.ethereum.values.config.ChainId;
import org.ethereum.crypto.ECKey;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Test for the [aClass.name/] contract.
 *
 */
public class [aClass.name/]Test[testExtends(aClass)/]{
	private static EthereumFacade ethereum;
[comment]	private static ECKey sender;[/comment]
	private static EthAccount sender;

	private [aClass.name/] fixture;
	private EthAddress fixtureAddress;
	private SoliditySource contractSource;
	// [protected (aClass.name+'Test.attributes')]
	//TODO: add custom attributes
	//for the blockchain proxy the sender is hard coded
	private String senderAddress = "5db10750e8caff27f906b41c71b3471057dd2004";
	// [/protected]

	/**
	 * Setup up the blockchain. Add the 'EthereumFacadeProvider' property to use 
	 * another block chain implemenation or network.
	 */
	@BeforeClass
	public static void setup() {
		ECKey key = new ECKey();
		sender = new EthAccount(key);
		String property = System.getProperty("EthereumFacadeProvider");
		if(property!=null){
			if (property.equalsIgnoreCase("main")) {
				ethereum = new MainEthereumFacadeProvider().create();
			}else if (property.equalsIgnoreCase("test")) {
				ethereum = new TestnetEthereumFacadeProvider().create();
			}else if (property.equalsIgnoreCase("ropsten")) {
				ethereum = new RopstenEthereumFacadeProvider().create();
			}else if (property.equalsIgnoreCase("rcp")) {
				RpcEthereumFacadeProvider rcp = new RpcEthereumFacadeProvider();
				String url = System.getProperty("rcp-url");
				String chainId = System.getProperty("chain-id");
				ethereum = rcp.create(url, new ChainId((byte) Integer.parseInt(chainId)));
			}
		}else{
			ethereum = new StandaloneEthereumFacadeProvider().create();
		}
	}

	/**
	 * Read the contract from the file and deploys the contract code.
	 * @throws Exception
	 */
	@Before
	public void prepareTest() throws Exception {
		//[protected ('prepareTest')]

        File contractSrc = new File(this.getClass().getResource("[if (p.getContractPathForJava()<>'')]/[p.getContractPathForJava()/][/if]/[p.name/].sol").toURI());
        contractSource = SoliditySource.from(contractSrc);
		createFixture();
		//[/protected]
	}


	/**
	 * Create a new fixture by deploying the contract source.
	 * @throws Exception
	 */
	protected void createFixture() throws Exception {
		//[protected ('createFixture')]
[if (aClass.allConstructors()->isEmpty())]
        CompletableFuture<EthAddress> address = ethereum.publishContract(contractSource, "[aClass.name/]", sender);
[else]
[let op : Operation = aClass.allConstructors()->first()]
		//TODO: set the constructor args
[for (p : Parameter | op.allInParameters())]
		[p.type.toJavaType()/] [p.name/] = [p.toJavaExample()/];
[/for]

        CompletableFuture<EthAddress> address = ethereum.publishContract(contractSource, "[aClass.name/]", sender
				[for (p : Parameter | op.allInParameters())], [p.name/][/for]);
[/let]
[/if]
        fixtureAddress = address.get();
        setFixture(ethereum
                .createContractProxy(contractSource, "[aClass.name/]", address.get(), sender, [aClass.name/].class));
		//[/protected]
	}

	protected void setFixture([aClass.name/] f) {
		this.fixture = f;
[if (not aClass.allSuperTypesWithoutContractApi()->isEmpty())]
		super.setFixture(f);
[/if]
	}


[for (op : Operation | aClass.allConstructors())]
	/**
	 * Test the constructor for the [aClass.name/] contract.
	 * @throws Exception
	 */
	@Test
	public void testConstructor[op.operationParameters()/]() throws Exception {
		//[protected ('testConstructor'+op.operationParameters())]
		//TODO: Set the constructor args
[for (p : Parameter | op.allInParameters())]
		[p.type.toJavaType()/] [p.name/] = [p.toJavaExample()/];
[/for]

        CompletableFuture<EthAddress> address = ethereum.publishContract(contractSource, "[aClass.name/]", sender
				[for (p : Parameter | op.allInParameters())], [p.name/][/for]);
        fixture = ethereum
                .createContractProxy(contractSource, "[aClass.name/]", address.get(), sender, [aClass.name/].class);

		//TODO: test the constructor
		//[/protected]
	}
[/for]

[for (op : Operation | aClass.allAbstractFunctions()->select(isPublic()))]

	[op.printTestFunction(aClass)/][/for]
[for (op : Operation | aClass.allFunctions()->select(isPublic()))]

	[op.printTestFunction(aClass)/][/for]

	//[protected ('customTests')]    
	//[/protected]
}
[/file]
[/for]
[file (p.package2Path()+'/All'+ p.name.toUpperFirst()+'TestSuite.java'  , false, 'UTF-8')]
package [p.toPackage()/];

import org.junit.runners.Suite;
import org.junit.runner.RunWith;

@RunWith(Suite.class)
@Suite.SuiteClasses({
[for (	aClass : Class | p.allContracts()) separator (',')]
[aClass.name/]Test.class
[/for]
//[protected ('customTests')]    
//[/protected]
})
public class All[p.name.toUpperFirst()/]TestSuite {
}
[/file]
[/template]

[template public printTestFunction(op : Operation, aClass : Class)]
/**
 * Test method for  [op.name/]([printParameters(op,ParameterDirectionKind::_in)/]).
 * see {@link [aClass.name/]#[op.name/]([printParametersForJavaDoc(op,ParameterDirectionKind::_in)/])}
 * @throws Exception
 */
@Test
public void test[op.name.toUpperFirst()/][op.operationParameters()/]() throws Exception {
	//[protected ('test'+op.name.toUpperFirst()+op.operationParameters())]
	fail("not implemented");//TODO: implement this
	//[/protected]
}
[/template]

[template public testExtends (aClass : Class)  ]
[if (not aClass.allSuperTypesWithoutContractApi()->selectByType(Class)->isEmpty() )]
 extends [aClass.allSuperTypesWithoutContractApi()->selectByType(Class)->first().name/]Test[/if][/template]



[template public toJavaExample(p : Parameter)]
[if (p.type.name='string')]
"[p.name/]"[elseif (p.type.name.startsWith('uint'))]
0[elseif (p.type.name='boolean')]
true[elseif (p.type.name='address')]
org.adridadou.ethereum.EthAddress.of("0x0")[/if][/template]