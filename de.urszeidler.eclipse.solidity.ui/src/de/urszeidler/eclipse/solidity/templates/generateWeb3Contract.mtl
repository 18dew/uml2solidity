[comment encoding = UTF-8 /]
[module generateWeb3Contract('http://www.eclipse.org/uml2/5.0.0/UML')]

[import de::urszeidler::eclipse::solidity::util::um2service /]

[**
 * Generate for each package containing a compileable instrance the coresponding Web3 JS file.
*/]
[template public generateWeb3Contract(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[generatePackage(p1)/]
[iteratePackages(p1)/]
[/for]
[/template]

[**
 * Generate the web3 for the given package.
*/]
[template public generatePackage (p : Package)?(isGeneratePackage(p)) ]
[file (p.name+'Web3.js', false, 'UTF-8')]

[for (	aClass : Class | p.allContracts())]
var [aClass.name/]Contract = web3.eth.contract([ '[' /]
[for (p : Property | aClass.allCProperties())]
{"constant":true,"inputs":[ '[' /][ ']' /],"name":"[p.name/]","outputs":[ '[' /]{"name":"","type":"[p.type.name/]"}[ ']' /],"type":"function"},
[/for]
[for (p : Property | aClass.allAttributes()-> select(isMapping()))]
{"constant":true,"inputs":[ '[' /]{"name":"","type":"[p.type.name/]"}[ ']' /],"name":"[p.name/]","outputs":[ '[' /]{"name":"","type":"[getStereotypeValue('Mapping', 'value').oclAsType(NamedElement).name/]"}[ ']' /],"type":"function"},
[/for]
[for (p : Property | aClass.allAttributes()-> select(isKeyMapping()))]
{"constant":true,"inputs":[ '[' /]{"name":"","type":"[getStereotypeValue('Mapping', 'key').oclAsType(NamedElement).name/]"}[ ']' /],"name":"[p.name/]","outputs":[ '[' /]{"name":"","type":"[p.type.name/]"}[ ']' /],"type":"function"},
[/for]
[printMethodSignature(aClass)/] [if (not aClass.ownedOperation->select(hasStereotype('Event'))->isEmpty())],[/if]
[for (op : Operation | aClass.ownedOperation->select(hasStereotype('Event')))]
[printEventSignature(op)/]
[/for]
[ ']' /] );   

[/for]

[/file]
[/template]

[**
 * Print the method signature as json.
*/]
[template public printMethodSignature (aClass : Class) ]
[for (op : Operation | aClass.allSubFunctions()->select(isPublic()))separator (',')]
  {
    "constant": [if(op.isReturnConstant())]true[else]false[/if],
    "inputs": ['['/][for (p : Parameter | op.allInParameters())separator (',')]{"name": "[p.name/]","type": "[p.type.name/]"}[/for][']'/],    
    "name": "[op.name/]",
    "outputs": ['['/][for (p : Parameter | op.allReturnParameters())separator (',')]{"name": "[p.name/]","type": "[p.type.name/]"}[/for][']'/],
    "type": "function"
  }
[/for]
[/template]

[**
 * Print the event signature as json.
*/]
[template public printEventSignature (op : Operation) ]
  {
    "constant": true,
    "inputs": ['['/][for (p : Parameter | op.allInParameters())separator (',')]{"name": "[p.name/]","type": "[p.type.name/]"}[/for][']'/],    
    "name": "[op.name/]",
    "type": "event"
  }

[/template]