[comment encoding = UTF-8 /]
[module generateContractBeans('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import de::urszeidler::eclipse::solidity::util::uml2service /]
[import de::urszeidler::eclipse::solidity::templates::generateJavaCode /]


[**
 * The documentation of the template generateElement.
 * @param aClass
 */]
[template public generateElement(aModel : Model)]
[comment @main/]
[generatePackage(aModel)/]
[iteratePackages(aModel)/]
[/template]

[**
 * Iterates over the packages.
*/]
[template private iteratePackages(p : Package)]
[for (p1 : Package | p.nestedPackage)]
[if (isGeneratePackage(p1))]
[generatePackage(p1)/]
[/if]
[iteratePackages(p1)/]
[/for]
[/template]

[template private generatePackage(p : Package)?(isGeneratePackage(p))]

[for (c : Class | p.allContracts())]
[generateContractBean(c)/]
[/for]
[/template]

[template private generatePackage(m : Model)]
[m.generateSessionBean()/]
[comment][m.generateApplicationBean()/][/comment]
[/template]

[query public toFunctionWrapperName(o : Operation) : String = o.toOperationId().toUpperFirst() /]
[query public toGetter(p : Parameter) : String = 'get'+ p.name.toUpperFirst()/]
[query public toGetter(c : Class) : String = 'get'+ c.name.toUpperFirst()/]
[query public toSetter(p : Parameter) : String = 'set'+ p.name.toUpperFirst() /]
[query public toProxyName(c : Class) : String = c.name.toLowerFirst()+'Proxy' /]

[query public toBeanName(c : Class) : String = c.name+'Bean' /]
[query public quallifiedName(p : Package) : String = p.getInterfacePackagePrefix()+'.'+p.name /]
[query public packageToPath(p : Package) : String = p.getInterfacePackagePrefix().replaceAll('\\.', '/') /]

[query public basePackage(p : Package) : String = p.getConfigurationParameter('BASE_PACKAGE') /]
[query public basePackagePath(p : Package) : String = p.basePackage().replaceAll('\\.', '/') /]
[query public contractPackage(p : Package) : String = p.basePackage()+'.'+p.name+'.beans' /]
[query public contractPackagePath(p : Package) : String = p.contractPackage().replaceAll('\\.', '/') /]
[query public beanPackage(p : Package) : String = p.basePackage()+'.beans' /]
[query public beanPackagePath(p : Package) : String = p.beanPackage().replaceAll('\\.', '/') /]


[query public contractAddressField(c : Class) : String = c.name.toLowerFirst()+'Address' /]


[query public allPublicInterfaceFunctions(c : Class) : Sequence(Operation) = c.allFunctions()->select(isPublic() and not isDefaultFunction() )
-> asSequence()->union(c.allAbstractFunctions()->select(isPublic()))
 /]
 [query public allPublicInterfaceFunctionsNonConst(c : Class) : Sequence(Operation) = c.allPublicInterfaceFunctions()
-> select(not isReturnConstant())/]
 [query public allPublicInterfaceFunctionsConst(c : Class) : Sequence(Operation) = c.allPublicInterfaceFunctions()
-> select(isReturnConstant())/]


[query public toOperationId(o : Operation) : String = o.name.toLowerFirst()+o.allInParameters()  ->collect('_'+type.name.toLower()) /]


[template public generateApplicationBean(m : Model)]
[file (m.beanPackagePath().concat('/ApplicationBean.java'), false, 'UTF-8')]
package [m.beanPackage()/];


import java.io.IOException;
import java.math.BigInteger;
import java.util.concurrent.ExecutionException;

import javax.annotation.PostConstruct;

import org.adridadou.ethereum.propeller.keystore.AccountProvider;
import org.adridadou.ethereum.propeller.values.EthAccount;
import org.adridadou.ethereum.propeller.values.EthAddress;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

import de.urszeidler.checksum.EthereumInstance;
import de.urszeidler.checksum.deployer.ContractDeployer;

/**
 * @author urszeidler
 *
 */
@Component
public class ApplicationBean {

	private static final Logger logger = LoggerFactory.getLogger(ApplicationBean.class);

	@Autowired
	private Environment env;

	private de.urszeidler.checksum.contract.ChecksumDatabase database;
	private ContractDeployer contractDeployer;

	private EthAddress contractAddress;

	@PostConstruct
	public void init() {
		String ca = env.getProperty("contractAddress");
		// copy the application properties to system properties for the ethereum
		// instance
		System.setProperty(EthereumInstance.PROP_ETHEREUM_FACADE_PROVIDER,
				env.getProperty(EthereumInstance.PROP_ETHEREUM_FACADE_PROVIDER));
		System.setProperty(EthereumInstance.PROP_RPC_URL, env.getProperty(EthereumInstance.PROP_RPC_URL));
		System.setProperty(EthereumInstance.PROP_CHAIN_ID, env.getProperty(EthereumInstance.PROP_CHAIN_ID));
		System.setProperty(EthereumInstance.PROP_API_KEY, env.getProperty(EthereumInstance.PROP_API_KEY));

		EthereumInstance instance = EthereumInstance.getInstance();
		contractDeployer = new ContractDeployer(instance.getEthereum(), "/combined.json", true);

		contractAddress = EthAddress.of(ca);
	}


	public ContractDeployer getContractDeployer() {
		return contractDeployer;
	}

	public EthAddress getContractAddress() {
		return contractAddress;
	}

}
[/file]
[/template]


[template public generateSessionBean(m : Model)]
[file (m.beanPackagePath().concat('/SessionBean.java'), false, 'UTF-8')]
package [m.beanPackage()/];

import java.io.File;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.adridadou.ethereum.propeller.keystore.AccountProvider;
import org.adridadou.ethereum.propeller.keystore.FileSecureKey;
import org.adridadou.ethereum.propeller.keystore.SecureKey;
import org.adridadou.ethereum.propeller.values.EthAccount;
import org.adridadou.ethereum.propeller.values.EthAddress;
import org.adridadou.ethereum.propeller.values.EthValue;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;

import de.urszeidler.checksum.EthereumInstance;

[for (p : Package | m.nestedPackage->select(isGeneratePackage()))]
import [p.deployerPackage()/].[p.deployerName()/];
[/for]


/**
 * The session bean managing the account and the contract addresses for this session.
 *
 */
@Named
@SessionScoped
public class SessionBean {

	private static final Logger log = LoggerFactory.getLogger(SessionBean.class);

	@Value("${keyFile}")
	private String keyFile;
	private String keyPass;

	private EthAccount account = AccountProvider.fromPrivateKey(BigInteger.valueOf(100000L));
[for (p : Package | m.nestedPackage->select(isGeneratePackage()))]
[for (c : Class | p.allContracts())]
	@Value("${[c.name.toLowerFirst()/]Address}")
	private String [c.name.toLowerFirst()/]Adr;
	private EthAddress [c.contractAddressField()/];
[/for]
	private [p.deployerName()/] [p.deployerName().toLowerFirst()/];
	@Value("${[p.deployerName().toLowerFirst()/]-file}")
	private String [p.deployerName().toLowerFirst()/]CopiledContractsFile;
[/for]
	private boolean serverMode = true;
	private boolean readOnly = true;

	private List<AccountChangeListener> changeListeners = new ArrayList<>();

	public interface AccountChangeListener {
		void accountChanged(EthAccount account);
	}

	public void setReadOnly() {
		readOnly = true;
		account = AccountProvider.fromPrivateKey(BigInteger.valueOf(100000L));
		accountChanged(account);

	}

	@PostConstruct
	public void init() {
	//	contractAddress = application.getContractAddress();
		EthereumInstance instance = EthereumInstance.getInstance();
[for (p : Package | m.nestedPackage->select(isGeneratePackage()))]
		[p.deployerName().toLowerFirst()/] = new [p.deployerName()/](instance.getEthereum(),[p.deployerName().toLowerFirst()/]CopiledContractsFile , true);
[for (c : Class | p.allContracts())]
		[c.contractAddressField()/] = [c.name.toLowerFirst()/]Adr == null ? EthAddress.empty() : EthAddress.of([c.name.toLowerFirst()/]Adr);
[/for]
[/for]
	}

	private void accountChanged(EthAccount newAccount) {
		List<AccountChangeListener> listeners = new ArrayList<>(changeListeners);
		for (AccountChangeListener accountChangeListener : listeners) {
			accountChangeListener.accountChanged(newAccount);
		}
	}

	public void addAccountChangeListner(AccountChangeListener listner) {
		changeListeners.add(listner);
	}

	public void removeAccountChangeListner(AccountChangeListener listner) {
		changeListeners.remove(listner);
	}

	/**
	 * Unlock the key with the password.
	 */
	public void unlockKey() {
		if (log.isDebugEnabled()) {
			log.debug("Unlock Key:" + keyFile);
		}

        FacesContext context = FacesContext.getCurrentInstance();

		SecureKey key2 = new FileSecureKey(new File(keyFile));
		EthAccount decode;
		try {
			decode = key2.decode(keyPass);
			account = decode;
			serverMode = true;
			readOnly = false;
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Key Unlocked", "Set readonly to false"));
			accountChanged(account);
		} catch (Exception e) {
			log.error("Error unlocking key.", e);
			context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error unlocking Key", e.getMessage()));
		}
	}

	public void changeContractAddress() {
		accountChanged(account);
	}
	
	
	public BigInteger getBalance() {
		EthValue balance = EthereumInstance.getInstance().getEthereum().getBalance(account);
		return balance.inWei();
	}

	public String getKeyFile() {
		return keyFile;
	}

	public void setKeyFile(String keyFile) {
		this.keyFile = keyFile;
	}

	public String getKeyPass() {
		return keyPass;
	}

	public void setKeyPass(String keyPass) {
		this.keyPass = keyPass;
	}

	public EthAccount getAccount() {
		return account;
	}

	public void setAccount(EthAccount account) {
		this.account = account;
	}

	public boolean isServerMode() {
		return serverMode;
	}

	public boolean isReadOnly() {
		return readOnly;
	}

	public EthAddress getAccountAddress() {
		return account.getAddress();
	}

	public void setServerMode(boolean serverMode) {
		this.serverMode = serverMode;
	}

	public void setReadOnly(boolean readOnly) {
		this.readOnly = readOnly;
	}
[for (p : Package | m.nestedPackage->select(isGeneratePackage()))]

	public [p.deployerName()/] get[p.deployerName()/]() {
		return [p.deployerName().toLowerFirst()/];
	}
[for (c : Class | p.allContracts())]

	public EthAddress get[c.contractAddressField().toUpperFirst()/]() {
		return [c.contractAddressField()/];
	}

	public void set[c.contractAddressField().toUpperFirst()/](EthAddress [c.contractAddressField()/]) {
		this.[c.contractAddressField()/] = [c.contractAddressField()/];
	}
[/for]
[/for]
}
[/file]	
[/template]


[template public generateContractBean(c : Class)]
[file (c._package.contractPackagePath()+ '/'+ c.toBeanName().concat('.java'), false, 'UTF-8')]
package [c._package.contractPackage()/];

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;
import javax.inject.Named;

import org.adridadou.ethereum.propeller.values.EthAccount;
import org.adridadou.ethereum.propeller.values.EthAddress;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import rx.Observable;

import [quallifiedName(c._package)/].*;
import [c._package.beanPackage() /].*;

/**
 * Manage a [c.name/] contract. This session bean provide access to the [c.name/] contract  on the blockchain.
 */
@Named
@SessionScoped
public class [c.toBeanName()/] {

	private static final Logger log = LoggerFactory.getLogger([c.toBeanName()/].class);

	@Inject
	private SessionBean session;
	private Collection<String> contractMessages = new ArrayList<>();
	private Collection<Object> events = new ArrayList<>();

	private [c.name/] [c.toProxyName()/];
[for (o : Operation | c.allEvents())]
	private boolean subscribe[o.toEventTypeName()/] = true;
[/for]
[for (o : Operation | c.allPublicInterfaceFunctionsNonConst())]
	private [o.toFunctionWrapperName()/]  [o.toFunctionWrapperName().toLowerFirst()/] = new [o.toFunctionWrapperName()/]();
[/for]
[for (o : Operation | c.allConstructors())]
	private [o.toFunctionWrapperName()/]  [o.toFunctionWrapperName().toLowerFirst()/] = new [o.toFunctionWrapperName()/]();
[/for]
[for (o : Operation | c.allPublicInterfaceFunctionsNonConst())]
[o.generateFunctionBean(c, o.functionExecution(c))/]
[/for]
[for (o : Operation | c.allConstructors())]
[o.generateFunctionBean(c, o.constructorExecution(c))/]
[/for]

[for (p : Property | c.allCProperties()->select(isPublic()))]

	/**
	 * The attribute [p.name/] of the contract.
	 * 
	 * @return
	 */
	public [p.toJavaType()/] [p.name/]() {
		if ([c.toGetter()/]() == null)
			return [p.toJavaDefaultValue()/];

		return [c.toGetter()/]().[p.name/]();
	}
[/for]
[for (p : Property | c.allMappingSubAttributes())]
[let value : Classifier = p.getStereotypeValue('Mapping', 'value').oclAsType(Classifier)]

[p.printCollection(value,c)/]
[/let]
[/for]
[for (p : Property | c.allKeyMappingSubAttributes())]
[let value : Classifier = p.getStereotypeValue('KeyMapping', 'key').oclAsType(Classifier)]

[p.printCollection(p.type,c)/]
[/let]
[/for]

	/**
	 * Add a contact message.
	 * 
	 * @param log the log message
	 * @param severity can be null
	 * @param e the exception can be null
	 */
	public void addContractMessage(String log, Severity severity, Exception e) {
		//[protected (c.name+'_addContractMessage')]
		FacesContext context = FacesContext.getCurrentInstance();
		contractMessages.add(log);
		context.addMessage(null, new FacesMessage(severity == null ? FacesMessage.SEVERITY_INFO : severity, log,
				e != null ? e.getMessage() : ""));

		//[/protected]
	}

	/**
	 * Initialize the bean. Register as {@link AccountChangeListener}.
	 */
	@PostConstruct
	public void init() {
		session.addAccountChangeListner(a-> cleanContract());
		//[protected (c.name+'_init')]

		//[/protected]
	}

	/**
	 * Cleans the contract proxy.
	 */
	public void cleanContract() {
		[c.toProxyName()/] = null;
	}

	/**
	 * Return a contract proxy.
	 * 
	 * @return the created proxy.
	 */
	public [c.name/] [c.toGetter()/]() {
		if ([c.toProxyName()/] == null) {

			try {
				[c.toProxyName()/] = session.get[c._package.deployerName()/]()
						.create[c.name/]Proxy(session.getAccount(), session.get[c.contractAddressField().toUpperFirst()/]());
[for (o : Operation | c.allEvents())]
				if (subscribe[o.toEventTypeName()/]) {
					Observable<[o.eventName()/]> eo = session
							.getContractDeployer()
							.observe[o.eventName()/](session.getChecksumDatabaseAddress());
					eo.subscribe(e -> events.add(e));
				}
[/for]
			} catch (IOException | InterruptedException | ExecutionException e) {
				log.error("Error creating contractProx.", e);
			}
		}
		return [c.toProxyName()/];
	}

	/**
	 * The address of the current contract instance.
	 * 
	 * @return the address with leading zero
	 */
	public String getAddress() {
		return session.get[c.contractAddressField().toUpperFirst()/]().withLeading0x();
	}

	public Collection<String> getContractMessages() {
		return contractMessages;
	}

	public Collection<Object> getEvents() {
		return events;
	}
 
	//[protected ('additonal_methods')]

	//[/protected]

[comment]	public List<ChecksumDatabaseChecksumEntry> getEntries() {
		if(getChecksumDatabase()==null)
			return Collections.emptyList();

		de.urszeidler.checksum.contract.ChecksumDatabase database = getChecksumDatabase();

		List<ChecksumDatabaseChecksumEntry> list = new ArrayList<>(database.count());
		for (int i = 0; i < database.count(); i++) {
			list.add(database.entries(i));
		}
		return list;
	}[/comment]
}
[/file]	
[/template]

[template public functionExecution(o : Operation, c : Class)]

		/**
		 * Execute the function [o.name/] on the contract.
		 */
		public void execute() {
			try {
				addContractMessage("The transaction [o.toFunctionWrapperName()/] is send.", null, null);
				[c.toGetter()/]().[o.name/]([for (p : Parameter | o.allInParameters()) separator (',')][p.toGetter()/]()[/for]).thenApply(
						t -> {
							if(log.isInfoEnabled()){
								log.info("Transaction mined.");
							}
							addContractMessage("The transaction [o.toFunctionWrapperName()/] is mined.[ '[' /]"+ [for (p : Parameter | o.allInParameters()) separator ('+ " ,"+')][p.toGetter()/]()[/for] +"[ ']' /] ", null, null);
							//[protected (o.toFunctionWrapperName()+'_execute')]

							//[/protected]
							return null;
						});
			} catch (Exception e) {
				log.error("Error executing [o.name/].", e);
				addContractMessage("Error calling [o.name/].", FacesMessage.SEVERITY_ERROR, e);
			}
		}
	}
[/template]

[template public constructorExecution(o : Operation, c : Class)]

		/**
		 * Execute the constructor [o.name/] on the contract.
		 */
		public void execute() {
			try {
				addContractMessage("The Contract [c.name/] is deployed.", null, null);
				session.getContractDeployer()
					.deployChecksumDatabase(session.getAccount(), [for (p : Parameter | o.allInParameters()) separator (',')][p.toGetter()/]()[/for])
					.thenApply(	e->{
						addContractMessage("The Contract [c.name/] is mined.[ '[' /]"+ [for (p : Parameter | o.allInParameters()) separator ('+ " ,"+')][p.toGetter()/]()[/for] 
							+"[ ']' /] address: "+e.withLeading0x(), null, null);
						//[protected (o.toFunctionWrapperName()+'_executeConstructor')]

						//[/protected]
						return e;
					}
				);
			} catch (Exception e) {
				log.error("Error deploying [c.name/].", e);
				addContractMessage("Error calling [o.name/].", FacesMessage.SEVERITY_ERROR, e);
			}
		}
	}
[/template]


[template public generateFunctionBean(o : Operation, c : Class, executeCode : String)]

	/**
	 * Function Bean. Executes the [o.name/] function on the contract.
	 *
	 */
	public class [o.toFunctionWrapperName()/] {
[for (p : Parameter | o.allInParameters())]
		private [p.toJavaType()/] [p.name.toLowerFirst()/];
[/for]
[for (p : Parameter | o.allInParameters())]

		/**
		 * The getter [p.name/] parameter.
		 * 
		 * @return
		 */
		public [p.toJavaType()/] [p.toGetter()/]() {
			return [p.name.toLowerFirst()/];
		}

		/**
		 * The setter for the [p.name/].
		 * @param [p.name.toLowerFirst()/]
		 */
		public void [p.toSetter()/]([p.toJavaType()/] [p.name.toLowerFirst()/]) {
			this.[p.name.toLowerFirst()/] = [p.name.toLowerFirst()/];
		}
[/for]
[executeCode/]

	/**
	 * Return the [o.toFunctionWrapperName()/] function bean.
	 * @return
	 */
	public [o.toFunctionWrapperName()/] get[o.toFunctionWrapperName()/]() {
		return [o.toFunctionWrapperName().toLowerFirst()/] ;
	}
[/template]

[template public printCollection(p : Property, t : Type, c : Class)]
	/**
	 * Return a collection for a mapping.
	 * @return a collection of {@link [t.toJavaType()/]}
	 */
	public Collection<[t.toJavaType()/]> get[p.name.toUpperFirst()/]() {
		if([c.toGetter()/]()==null)
			return Collections.emptyList();

		Collection<[t.toJavaType()/]> c = new ArrayList<>();
		//[protected (p.name.toUpperFirst()+'_collection')]
		// TODO : implement the collection
		//[/protected]
		return c;
	}
[/template]

[template private toJavaDefaultValue(p : Property)]
[if (p.toJavaType().equalsIgnoreCase('String'))]
""[elseif (p.toJavaType().equalsIgnoreCase('Integer'))]
0[elseif (p.toJavaType().equalsIgnoreCase('Long'))]
0[elseif (p.toJavaType().equalsIgnoreCase('EthAddress'))]
EthAddress.empty()[/if]
[/template]
