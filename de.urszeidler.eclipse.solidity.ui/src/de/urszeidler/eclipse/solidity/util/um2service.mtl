[comment encoding = UTF-8 /]
[module um2service('http://www.eclipse.org/uml2/5.0.0/UML')/]

[query public indexInContainer(class : Element) : Integer
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getIndexInContainer(org.eclipse.uml2.uml.Element)', Sequence{class})
/]
[query public hasStereotype(class : Element, name : String) : Boolean
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'hasStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence{class, name})
/]
[query public getStereotype(class : Element, name : String) : Stereotype
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence{class, name})
/]
[query public getStereotypeValue(class : Element, name : String,propertyname : String) : OclAny
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotypeValue(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)', Sequence{class, name,propertyname})
/]
[query public getStereotypeListValue(class : Element, name : String,propertyname : String) : Sequence(Constraint)
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getStereotypeListValue(org.eclipse.uml2.uml.Element, java.lang.String, java.lang.String)', Sequence{class, name,propertyname})
/]
[query public getSolidityFileHeader(class : Package) : String
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getSolidityFileHeader(org.eclipse.uml2.uml.NamedElement)', Sequence{class})
/]
[query public getJsControllerDirectory(class : NamedElement) : String
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'getJsControllerDirectory(org.eclipse.uml2.uml.NamedElement)', Sequence{class})
/]
[query public generateJsController(class : NamedElement) : Boolean
	= invoke('de.urszeidler.eclipse.solidity.util.Uml2Service', 'generateJsController(org.eclipse.uml2.uml.NamedElement)', Sequence{class})
/]

[query public isGeneratePackage(pa : Package) : Boolean = not pa.allContracts()->isEmpty() 
or not pa.allLibrarys()->isEmpty()
or not pa.allInterfaces()->isEmpty() /]

[query public allContracts(aModel : Model) : OrderedSet(Class) = aModel.ownedElement
	->selectByType(Class)
	->select(hasStereotype('Contract')) 
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]

[query public allContracts(aModel : Package) : OrderedSet(Class) = aModel.ownedElement
	->selectByType(Class)
	->select(hasStereotype('Contract')) 
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]

[query public allInterfaces(aModel : Model) : OrderedSet(Interface) = aModel.ownedElement
	->selectByType(Interface)
	->sortedBy( indexInContainer(oclAsType(Interface)) ) /]

[query public allInterfaces(aModel : Package) : OrderedSet(Interface) = aModel.ownedElement
	->selectByType(Interface)
	->sortedBy( indexInContainer(oclAsType(Interface)) ) /]

[query public allLibrarys(aModel : Model) : OrderedSet(Class) = aModel.ownedElement
	->selectByType(Class)
	->select(hasStereotype('Library')) 
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]

[query public allLibrarys(aModel : Package) : OrderedSet(Class) = aModel.ownedElement
	->selectByType(Class)
	->select(hasStereotype('Library')) 
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]


[query public allStructs(aClass : Class) : OrderedSet(Class) = aClass.ownedMember
	->select(hasStereotype('Struct'))
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]

[query public allStructs(aClass : Interface) : OrderedSet(Class) = aClass.ownedMember
	->select(hasStereotype('Struct'))
	->sortedBy( indexInContainer(oclAsType(Class)) ) /]

[query public allFunctions(aClass : Class) : OrderedSet(Operation) = aClass.allOwnedElements()
	->selectByType(Operation)
	->select(hasStereotype('Function')) 
	->sortedBy(indexInContainer(oclAsType(Operation))) /]

[query public allAbstractFunctions(aClass : Class) : Sequence(Operation) = aClass.allSuperTypes()
	->collect(ownedElement)
	->selectByKind(Operation)
	->select(hasStereotype('Function'))
	->select(owner.oclIsTypeOf(Interface) or isAbstract)
	->sortedBy(indexInContainer(oclAsType(Operation))) /]

[query public allAbstractFunctions1(aClass : Class) : OrderedSet(Operation) = aClass.getAllOperations()
	->selectByType(Operation)
	->select(hasStereotype('Function'))
	->select(owner.oclIsTypeOf(Interface) or isAbstract)
	->select( aClass.allSuperTypes()->includes(owner) )
	->sortedBy(indexInContainer(oclAsType(Operation))) /]


[query public allSubFunctions(aClass : Class) : OrderedSet(Operation) = aClass.getAllOperations()
->select(hasStereotype('Function'))
->select(visibility<>VisibilityKind::private)
->sortedBy(indexInContainer(oclAsType(Operation)) + name )
 /]


[query public isPublic(p : Property) : Boolean = p.visibility.oclIsUndefined() or p.visibility=VisibilityKind::public /]
[query public isPublic(f : Operation) : Boolean = f.visibility.oclIsUndefined() or f.visibility=VisibilityKind::public /]


[query public isMapping(p : Property) : Boolean = p.hasStereotype('Mapping') /]
[query public isKeyMapping(p : Property) : Boolean = p.hasStereotype('KeyMapping') /]
[query public isAttribute(p : Property) : Boolean = not p.hasStereotype('Mapping') and not p.hasStereotype('KeyMapping')/]


[query public isContract(c : Type) : Boolean = c.hasStereotype('Contract') /]
[query public isStruct(s : Type) : Boolean = s.hasStereotype('Struct') /]


[query public allCProperties(c : Class) : OrderedSet(Property) = c.attribute 
	-> select(not hasStereotype('Mapping') and not hasStereotype('KeyMapping')) /]

[query public allMappingProperties(c : Class) : OrderedSet(Property) = c.attribute 
	-> select(isMapping()) /]

[query public allKeyMappingProperties(c : Class) : OrderedSet(Property) = c.attribute 
	-> select(isKeyMapping()) /]

[query public allGetterProperties(c : Class) : OrderedSet(Property) = c.attribute 
	-> select(hasStereotype('GetterSetter')) /]

[query public allSuperTypes(aClass : Class) : Sequence(Classifier) = aClass.general
	->union(aClass.interfaceRealization->collect(contract))
	->sortedBy( indexInContainer(oclAsType(Classifier)) ) /]

[query public allSuperTypesWithoutContractApi(aClass : Class) : Sequence(Classifier) = aClass.allSuperTypes()
	->select(not hasStereotype('StandardizedContractAPI'))
	->sortedBy( indexInContainer(oclAsType(Classifier))+name ) /]

[query public allInParameters(aOp : Operation) : OrderedSet(Parameter) = aOp.ownedParameter->
select(oclAsType(Parameter).direction=ParameterDirectionKind::_in) /]

[query public allReturnParameters(aOp : Operation) : OrderedSet(Parameter) = aOp.ownedParameter->
select(oclAsType(Parameter).direction=ParameterDirectionKind::return) /]

[query public hasReturnValue(aOperation : Operation) : Boolean = aOperation.allReturnParameters()->size()>0 /]
[query public inherites(aClass : Class,superE : Element) : Boolean = not aClass.allSuperTypes()->includes(superE) /]

[query public hasModifier(aOperation : Operation) : Boolean = not aOperation.allModifier()->isEmpty() or not aOperation.allParameterModifier()->isEmpty() /]

[query public isReturnConstant(aOperation : Operation) : Boolean = aOperation.hasReturnValue() 
and aOperation.getStereotypeValue('Function', 'returnType').oclAsType(NamedElement).name<>'default' /]

[query public allModifier(op : Operation) : Set(Constraint) = Constraint.allInstances()->select(constrainedElement->includes(op))  
 /]

[query public allParameterModifier(op : Operation) : Set(DataType) = op.getStereotypeListValue('Function','modifiers')->asSet() 
 /]

[query public appliedModifier(op : Operation) : Sequence(Constraint) =
op.getStereotypeListValue('Function','modifier') 
/]



[query public allImports(p : Package) : OrderedSet(PackageImport) = p.packageImport
->select(hasStereotype('Import'))
->sortedBy(indexInContainer(oclAsType(PackageImport))) 
/]



[comment][query public firstReturnParameter(aOperation : Operation) : Parameter = aOperation.ownedParameter->select(oclAsType(Parameter).direction=ParameterDirectionKind::return)->first() /][/comment]
